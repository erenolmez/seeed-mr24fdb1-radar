import serial
import time

"""1. The read-write command is the command that is transmitted fromthe host
computer to the radar. 2. The reporting command is when the radar transmits 
information to the host computer. 3. The fall sensitivity is 1 to 10 levels, 
and the default is 4. The larger the lever, themore sensitive it is. 4. Human 
body sensitivity is 1-10 levels, and the default is 7. The higher the level,
the more sensitive it is."""

cuc_CRCHi = [
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40
]

cuc_CRCLo = [
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
0x41, 0x81, 0x80, 0x40 
]

# Set up serial communication on GPIO pins
ser = serial.Serial(
    port = '/dev/ttyS0',
    baudrate = 9600,
    parity = serial.PARITY_NONE,
    stopbits = serial.STOPBITS_ONE,
    bytesize = serial.EIGHTBITS
)


def concatenate_hex_bytes(data):
    # Extract bytes 1-43 from data
    bytes = data[0:43]

    # Convert each byte to hexadecimal string
    hex_strings = [format(b, '02x') for b in bytes]

    # Concatenate hex strings
    hex_string = ''.join(hex_strings)
    return hex_string


def hex_to_int(value_str):
    return int(value_str, 16)


def us_CalculateCrc16(lpuc_Frame, lus_Len):
    luc_CRCHi = 0xFF
    luc_CRCLo = 0xFF
    li_Index = 0
    while lus_Len:
        lus_Len -= 1
        li_Index = luc_CRCLo ^ lpuc_Frame[0]
        lpuc_Frame = lpuc_Frame[1:]
        luc_CRCLo = (luc_CRCHi ^ cuc_CRCHi[li_Index]) & 0xFF
        luc_CRCHi = cuc_CRCLo[li_Index] & 0xFF
    return (luc_CRCLo << 8) | luc_CRCHi


def configure_settings(read_or_write, option):
    # Read Commands
    if read_or_write == "read": 
        # 1st Option: Read Device ID
        if option == 1:        
            data = [0x55, 0x07, 0x00, 0x01, 0x01, 0x01]
        # 2nd Option: Read Software version
        if option == 2:
            data = [0x55, 0x07, 0x00, 0x01, 0x01, 0x02] 
        # 3rd Option: Read Hardware version
        if option == 3:
            data = [0x55, 0x07, 0x00, 0x01, 0x01, 0x03]
        # 4th Option: Read Protocol version
        if option == 4: 
            data = [0x55, 0x07, 0x00, 0x01, 0x01, 0x04]
        # 5th Option: Read Environmental status
        if option == 5: 
            data = [0x55, 0x07, 0x00, 0x01, 0x03, 0x05]
        # 6th Option: Read Signs parameters
        if option == 6: 
            data = [0x55, 0x07, 0x00, 0x01, 0x03, 0x06]
        # 7th Option: Read Threshold gear
        if option == 7: 
            data = [0x55, 0x07, 0x00, 0x01, 0x04, 0x0C]
        # 8th Option: Read Scene setting
        if option == 8: 
            data = [0x55, 0x07, 0x00, 0x01, 0x04, 0x10]
        # 9th Option: Read Fall function switch
        if option == 9: 
            data = [0x55, 0x07, 0x00, 0x01, 0x05, 0x0B]
        # 10th Option: Read Fall alarm time query
        if option == 10: 
            data = [0x55, 0x07, 0x00, 0x01, 0x05, 0x0C]
        # 11th Option: Read Fall sensitivity query
        if option == 11: 
            data = [0x55, 0x07, 0x00, 0x01, 0x05, 0x0E]

    # Write Commands
    if read_or_write == "write": 
        # 1st Option: Copy order Threshold gear
        # n = [1:10]: Corresponding to 1 2 3 4 5 6 7 8 9 10 gears (default 7) 
        # The higher thegear, the more sensitive it is.  
        if option == 1: 
            n = 7
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x0C, hex_to_int("0x{:02x}".format(n))]
        # 2nd Option: Copy order Scene setting: Default mode
        if option == 2: 
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x00]
        # 3rd Option: Copy order Scene setting: Area detection (top loading)
        if option == 3: 
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x01]
        # 4th Option: Copy order Scene setting: Bathroom (top mounted)
        if option == 4: 
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x02]
        # 5th Option: Copy order Scene setting: Bedroom (top loading)
        if option == 5: 
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x03]
        # 6th Option: Copy order Scene setting: Living room (top mounted)
        if option == 6: 
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x04]
        # 7th Option: Copy order Scene setting: Office (top loading)
        if option == 7: 
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x05]
        # 8th Option: Copy order Scene setting: Hotel (top loading)
        if option == 8: 
            data = [0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x06]
        # 9th Option: Copy order Reboot
        if option == 9: 
            data = [0x55, 0x07, 0x00, 0x02, 0x05, 0x04]
        # 10th Option: Copy order Fall function switch
        # n = [0, 1]: Off 0x00, On 0x01
        if option == 10:
            n = 1
            data = [0x55, 0x08, 0x00, 0x02, 0x05, 0x0B, hex_to_int("0x{:02x}".format(n))]
        # 11th Option: Copy order Fall alarm time
        # n = [0, 9]: 1min 0X00, 2min 0X01, 3min 0X02, 4min 0X03, 5min 0X04, 
        # 6min 0X05, 7min 0X06, 10min 0X07, 15min 0X08, 30min 0X09
        if option == 11:
            n = 0
            data = [0x55, 0x08, 0x00, 0x02, 0x05, 0x0C, hex_to_int("0x{:02x}".format(n))]
        # 12th Option: Copy order Fall sensitivity setting
        # n = [1, 10]: Default fall sensitivity is 4. The lower the gear, the 
        # less sensitive it is. The higher the gear, the more sensitive it is.
        if option == 12:
            n = 10
            data = [0x55, 0x08, 0x00, 0x02, 0x05, 0x0E, hex_to_int("0x{:02x}".format(n))]
        # 13th Option: Copy order Start OTA upgrade
        # 4byte Integer data (firmware package size) + nbyte (software version number)
        if option == 13:
            # n = 4byte Integer data (firmware package size) + nbyte (software version number)
            data = [0x55, 0x08, 0x00, 0x02, 0x05, 0x08, hex_to_int("0x{:02x}".format(n))]
        # 14th Option: Copy order Upgrade package transfer
        if option == 14:
            # n = 4Packet Offset (4byte) + Packet (1024byte)
            data = [0x55, 0x08, 0x00, 0x02, 0x05, 0x09, hex_to_int("0x{:02x}".format(n))]
        # 15th Option: Copy order End of upgrade information
        if option == 15:
            data = [0x55, 0x08, 0x00, 0x02, 0x05, 0x0A, 0X0F]

    return data


def main(data):
    # Please fill in the data frame you want to set according to the datasheet(Excluding 2 Byte checksum frames)
    crc_data = 0x0000
    length = len(data)
    datas = [0] * (length + 2)
    data_to_be_sent = [0] * (length + 2)
    for n in range(length):
        datas[n] = data[n]
    print("The data frame length is:", length)
    crc_data = us_CalculateCrc16(data, length)
    datas[length] = (crc_data & 0xff00) >> 8
    datas[length+1] = crc_data & 0xff
    print("The last two CRC check digits are: {:04x}".format(crc_data))
    print("The datas send to the radar: ", end="")
    for n in range(length + 2):
        print("0x{:02x} ".format(datas[n]), end="")
        data_to_be_sent[n] = hex_to_int("0x{:02x}".format(datas[n]))
    print("integer equivalent: ", data_to_be_sent)
    return data_to_be_sent


if __name__ == '__main__':
    data = configure_settings("write", 4) # Bathroom (top mounted)
    data_to_be_sent = main(data)
    blist = bytes(data_to_be_sent)
    ser.write(blist)
    Msg = concatenate_hex_bytes(ser.read(14))
    time.sleep(10)
    print(Msg)
    data = configure_settings("write", 10) # Fall function switch
    data_to_be_sent = main(data)
    blist = bytes(data_to_be_sent)
    ser.write(blist)
    Msg = concatenate_hex_bytes(ser.read(14))
    time.sleep(10)
    print(Msg)
    data = configure_settings("write", 12) # Fall sensitivity
    data_to_be_sent = main(data)
    blist = bytes(data_to_be_sent)
    ser.write(blist)
    Msg = concatenate_hex_bytes(ser.read(14))
    time.sleep(10)
    print(Msg)